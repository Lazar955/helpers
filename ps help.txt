private BindingList<Predmet> predmeti = new BindingList<Predmet>();
dgvPredmeti.DataSource = predmeti;

//parsiranje datuma
datum = DateTime.ParseExact(txtDatum.Text, "dd.MM.yyyy.", CultureInfo.InvariantCulture);

//validacija cb selected item
 VrstaPostupka vp = cbVrstaPostupka.SelectedItem as VrstaPostupka;
            if (vp.Naziv != advokat.Specijalnost)

// brisanje selected itema iz dgv
 if (dgvPredmeti.SelectedCells[0].RowIndex < predmeti.Count)
                predmeti.RemoveAt(dgvPredmeti.SelectedCells[0].RowIndex);

int id = VratiNovID();
konekcija.Open();
OleDbCommand komanda = konekcija.CreateCommand();
komanda.CommandType = System.Data.CommandType.Text;
komanda.Transaction = konekcija.BeginTransaction();
try
{
    foreach (Predmet p in list)
    {
        string sql = "INSERT INTO Predmet (PredmetID, Naziv, Problem, Datum, Advokat, KlijentID, VrstaPostupkaID)" +
            $" VALUES ({id}, '{p.Naziv}', '{p.Problem}', '{p.Datum}', '{p.Advokat.Username}', {p.Klijent.KlijentID}, {p.VrstaPostupka.VrstaPostupkaID})";
        komanda.CommandText = sql;
        komanda.ExecuteNonQuery();
        id++;
    }

    komanda.Transaction.Commit();
}

catch (Exception e)
{
    komanda.Transaction.Rollback();
    throw e;
}
finally
{
    konekcija.Close();
}


///////////////
//////Napravi cmb u dgv, prvo insert prazan RowIndex
 Asistent a = new Asistent();

listaAsistenataBindig.Add(a);

DataGridViewComboBoxCell cmbPredmeti = new DataGridViewComboBoxCell();

cmbPredmeti.DataSource = Sesija.Broker.dajSesiju().vratiPredmete();
cmbPredmeti.DisplayMember = "Naziv";
cmbPredmeti.ValueMember = "ObjekatPredmet";

dgvAsistenti.Rows[listaAsistenataBindig.Count() - 1].Cells["Predmet"] = cmbPredmeti;

//
brisanje selektovanog itema iz binding listaAsistenataBindig
 Asistent a = dgvAsistenti.SelectedRows[0].DataBoundItem as Asistent;
listaAsistenata.Remove(a);

----


konekcija.Open();
komanda.CommandText = "SELECT * FROM TAsistent inner join TPredmet on TAsistent.PredmetId=TPredmet.Sifra";
OleDbDataReader citac = komanda.ExecuteReader();

while (citac.Read())
{
    Asistent a = new Asistent();
    
    a.Sifra = Convert.ToInt32(citac["TAsistent.Sifra"]);
    a.Ime = citac["Ime"].ToString();
    a.Prezime = citac["Prezime"].ToString();
    a.Titula = citac["Titula"].ToString();

    Predmet p = new Predmet();
    p.Sifra = Convert.ToInt32(citac["TPredmet.Sifra"]);
    p.Naziv = citac["Naziv"].ToString();
    p.Semestar = Convert.ToInt32(citac["Semestar"]); 
    p.BrojBodova = Convert.ToInt32(citac["BrojBodova"]);

    a.Predmet = p;

    lista.Add(a);

////////////////stavka

StavkaRacuna stavkaRacuna = new StavkaRacuna();
                stavkaRacuna.RedniBroj = listaStavki.Count + 1;

                listaStavki.Add(stavkaRacuna);

                DataGridViewComboBoxCell cmbProizovdi = new DataGridViewComboBoxCell();
                cmbProizovdi.DataSource = Broker.dajBrokera().VratiSveProizvode();
                cmbProizovdi.DisplayMember = "Naziv";
                cmbProizovdi.ValueMember = "Vrednost";


                dgvStavke.Rows[stavkaRacuna.RedniBroj - 1].Cells[1] = cmbProizovdi;

//bindinglist
var yourList = new List<Customer>();
var listBinding = new BindingList<Customer>(yourList);


//sacuvaj racun i stavku

try
            {
                komanda.CommandText = $"insert into Racun values({r.BrRacun}, {r.Osoba.Jmbg})";
                komanda.CommandType = CommandType.Text;
                konekcija.Open();
                transakcija = konekcija.BeginTransaction();
                komanda.Transaction = transakcija;
                int rezultat = komanda.ExecuteNonQuery();
                foreach (StavkaRacuna stavka in r.StavkeRacuna)
                {
                    komanda.CommandText = $"insert into StavkaRacuna values({r.BrRacun}, {stavka.RedniBroj}, {stavka.Proizvod.Sifra}, {stavka.Cena}, {stavka.Kolicina})";
                    komanda.ExecuteNonQuery();
                }


                transakcija.Commit();
                return 1;
            }
            catch (Exception ex)
            {
                transakcija.Rollback();
                throw ex;
            }

            finally
            {
                konekcija.Close();
            }


///vrati sve racune i stavke


  public List<Racun> VratiSveRacuna()
        {
            List<Racun> listaRacuna = new List<Racun>();
            try
            {
                komanda.CommandText = $"select * from Racun inner join Osoba on Osoba.jmbg = Racun.Osoba";
                komanda.CommandType = CommandType.Text;
                konekcija.Open();
                OleDbDataReader citac = komanda.ExecuteReader();

                while(citac.Read())
                {
                    Racun racun = new Racun
                    {
                        BrRacun = (int)citac["Broj"],
                        Osoba = new Osoba
                        {
                            Jmbg = (int)citac["jmbg"],
                            ImePrezime = citac["imePrezime"].ToString(),
                            Mesto = new Mesto()
                        },
                        StavkeRacuna = new List<StavkaRacuna>()
                    };


                    OleDbCommand komanda2 = konekcija.CreateCommand();
                    komanda2.CommandText = $"select * from StavkaRacuna where BrojRacuna={racun.BrRacun}";
                    komanda2.CommandType = CommandType.Text;
                    OleDbDataReader citac2 = komanda2.ExecuteReader();
                    while(citac2.Read())
                    {
                        StavkaRacuna sr = new StavkaRacuna
                        {
                            RedniBroj = (int)citac2["Rb"],
                            Cena = (double)citac2["Cena"],
                            Kolicina = (int)citac2["Kolicina"],
                            Proizvod = new Proizvod()
                        };

                        racun.StavkeRacuna.Add(sr);
                    }
                    listaRacuna.Add(racun);
                }

                return listaRacuna;
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                konekcija.Close();
            }
        }

